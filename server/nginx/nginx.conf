# Minimal Nginx configuration for proxying WebSocket traffic and serving a fake website.
# This file should be placed in your Nginx configuration directory (e.g., /etc/nginx/sites-available/default or /etc/nginx/conf.d/your_domain.conf)
# Remember to configure SSL certificates (e.g., with Let's Encrypt) before use.

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name your_domain.com; # <<< IMPORTANT: REPLACE WITH YOUR DOMAIN NAME

    # SSL certificate paths - REPLACE WITH YOUR ACTUAL CERTIFICATE AND KEY PATHS
    ssl_certificate /etc/letsencrypt/live/your_domain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/your_domain.com/privkey.pem;

    ssl_session_cache shared:SSL:1m;
    ssl_session_timeout 5m;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # Optional: Serve a fake website for camouflage
    # Create an index.html file and other static assets in this directory.
    root /var/www/html; # <<< OPTIONAL: Adjust if your fake website is elsewhere
    index index.html index.htm;

    # Default location for serving the fake website
    location / {
        try_files $uri $uri/ =404; # Serve static files or return 404
    }

    # Location for v2ray-plugin WebSocket proxy
    # This path must match the 'path' parameter in your v2ray-plugin configuration.
    location /ws { # <<< IMPORTANT: This path should match v2ray-plugin -path parameter
        proxy_redirect off;
        proxy_pass http://127.0.0.1:10000; # <<< IMPORTANT: v2ray-plugin server listening port
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Additional common Nginx configurations
    # client_max_body_size 0; # disable client body size limit for large uploads
    # proxy_read_timeout 300s;
    # proxy_send_timeout 300s;
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name your_domain.com; # <<< IMPORTANT: REPLACE WITH YOUR DOMAIN NAME
    return 301 https://$host$request_uri;
}